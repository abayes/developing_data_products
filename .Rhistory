formula <- LOSS_RATIO_I ~ YEARS_IN_FILE + INTELLISCORE_PLUS_V2_SCORE +
POLICY_MODULE_I + TTC038_L + NUM_OF_DEROGATORY_LEGAL_ITEMS_I +
IQC001_I + COLLECTION_COUNT_I + TTB005_L + EARNED_PREMIUM_L
lr.model = glm(formula = formula, data= bonds_I_dev, family= binomial(link="logit"))
summary(lr.model)
auc(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response"))
roc(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response"))
auc(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response"))
roc(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response"))
table(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response") > 0.5)
table(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response") > 0.5)
summary(bonds.nont)
table(bonds.nont$POLICY_SYMBOL, bonds.nont$LR==0)
str(bonds.nont)
names(bonds.nont)
table(bonds.nont$FSR_SCORE_CLASS)
table(bonds.nont$POLICY_MODULE)
### Creating Variables
bonds <- bonds.nont
bonds$POLICY_EFFECTIVE_DATE <- as.Date(bonds$POLICY_EFFECTIVE_DATE,'%m/%d/%Y %H:%M')
bonds$EXPIRATION_DATE <- as.Date(bonds$EXPIRATION_DATE,'%m/%d/%Y %H:%M')
bonds$CANCELLATION_DATE <- as.Date(bonds$CANCELLATION_DATE,'%m/%d/%Y %H:%M')
bonds$TRUE_EXPIRATION_DATE <- pmin(bonds$CANCELLATION_DATE, bonds$EXPIRATION_DATE)
today <- as.Date('01/31/2016', '%m/%d/%Y')
num <- as.numeric(today - bonds$POLICY_EFFECTIVE_DATE)*bonds$TOTAL_WRITTEN_PREMIUM
den <- as.numeric(bonds$TRUE_EXPIRATION_DATE - bonds$POLICY_EFFECTIVE_DATE)
bonds$EARNED_PREMIUM <- num/den
# Removing 28830 cases where expiration date is same as policy effective date
# All these 28830 had policy status as cancelled
bonds <- bonds[den!=0,]
rm(num); rm(den);rm(today)
# Removing 831 more cases where Total Written premium is negative
# Removing 22156 more cases where total written premium is zero
bonds <- bonds[bonds$TOTAL_WRITTEN_PREMIUM > 0,]
bonds$INCURRED_LOSS <- bonds$PAID_LOSSES + bonds$RESERVE_AMOUNT
# Removing 48 more cases with negative paid losses
bonds <- bonds[bonds$PAID_LOSSES >= 0,]
# Removing 90 more cases with negative reserve amount
bonds <- bonds[bonds$RESERVE_AMOUNT >= 0,]
# Removing cases with $1 or $2 as the reserve amount and no paid losses - 2904 more cases
ref <- !((bonds$RESERVE_AMOUNT==1 | bonds$RESERVE_AMOUNT==2) & bonds$PAID_LOSSES==0)
bonds <- bonds[ref,]
rm(ref)
# Removing intelliscore 998 and 999
bonds <- bonds[bonds$INTELLISCORE_PLUS_V2_SCORE!=999,]
bonds <- bonds[bonds$INTELLISCORE_PLUS_V2_SCORE!=998,]
bonds$LOSS_RATIO <- bonds$INCURRED_LOSS/bonds$EARNED_PREMIUM
sum(bonds$LOSS_RATIO>0)/nrow(bonds)
sum(bonds$LOSS_RATIO > 1)
## SIC codes
library(stringi)
bonds$SIC_CODE <- ifelse(stri_length(bonds$SIC_CODE)==3, paste("0", bonds$SIC_CODE, sep=""), bonds$SIC_CODE)
bonds$SIC3 <-as.factor(ifelse(substr(bonds$SIC_CODE,1,2)==paste("0", 7, sep="")|substr(bonds$SIC_CODE,1,2)==15|
substr(bonds$SIC_CODE,1,2)==17|substr(bonds$SIC_CODE,1,2)==42|substr(bonds$SIC_CODE,1,2)==50|
substr(bonds$SIC_CODE,1,2)==57|substr(bonds$SIC_CODE,1,2)==58|substr(bonds$SIC_CODE,1,2)==59|
substr(bonds$SIC_CODE,1,2)==54|substr(bonds$SIC_CODE,1,2)==55|
substr(bonds$SIC_CODE,1,2)==64|substr(bonds$SIC_CODE,1,2)==65|substr(bonds$SIC_CODE,1,2)==72|
substr(bonds$SIC_CODE,1,2)==73|substr(bonds$SIC_CODE,1,2)==75|substr(bonds$SIC_CODE,1,2)==79|
substr(bonds$SIC_CODE,1,2)==80|substr(bonds$SIC_CODE,1,2)==81|substr(bonds$SIC_CODE,1,2)==82|
substr(bonds$SIC_CODE,1,2)==83|substr(bonds$SIC_CODE,1,2)==86|substr(bonds$SIC_CODE,1,2)==87,
substr(bonds$SIC_CODE,1,2),substr(bonds$SIC_CODE,1,1)))
bonds2 <- bonds[, c(1,3,6,20,25,26,28:64,66,68,69)]
### Logistic
# Creating indicator flags and log transformations for pertinent variables
# bonds2 is the dataset with all the indicator flags and log transformations, and idvs2 is the
# dataset with only the indicator flags and log transformations.
str(bonds2)
bonds2$LOSS_RATIO_I <- as.factor(ifelse(bonds2$LOSS_RATIO > 0, 1, 0))
bonds2$POLICY_MODULE_I <- as.factor(ifelse(bonds2$POLICY_MODULE > 0, 1, 0))
bonds2$CLAIM_COUNT_I <- as.factor(ifelse(bonds2$CLAIM_COUNT > 0, 1, 0))
bonds2$NUMBER_OF_LEGAL_ITEMS_I <- as.factor(ifelse(bonds2$NUMBER_OF_LEGAL_ITEMS > 0, 1, 0))
bonds2$LEGAL_BALANCE_I <- as.factor(ifelse(bonds2$LEGAL_BALANCE > 0, 1, 0))
bonds2$NUM_OF_DEROGATORY_LEGAL_ITEMS_I <- as.factor(ifelse(bonds2$NUM_OF_DEROGATORY_LEGAL_ITEMS > 0, 1, 0))
bonds2$LIEN_COUNT_I <- as.factor(ifelse(bonds2$LIEN_COUNT > 0, 1, 0))
bonds2$JUDGMENT_COUNT_I <- as.factor(ifelse(bonds2$JUDGMENT_COUNT > 0, 1, 0))
bonds2$LGC004_I <- as.factor(ifelse(bonds2$LGC004 > 0, 1, 0))
bonds2$LGC003_I <- as.factor(ifelse(bonds2$LGC003 > 0, 1, 0))
bonds2$LGC002_I <- as.factor(ifelse(bonds2$LGC002 > 0, 1, 0))
bonds2$UCC001_I <- as.factor(ifelse(bonds2$UCC001 > 0, 1, 0))
bonds2$UCC015_I <- as.factor(ifelse(bonds2$UCC015 > 0, 1, 0))
bonds2$IQC001_I <- as.factor(ifelse(bonds2$IQC001 > 0, 1, 0))
bonds2$MEDIAN_CREDIT_I <- ifelse(bonds2$MEDIAN_CREDIT > 0, 1, 0)
bonds2$MEDIAN_CREDIT_I[is.na(bonds2$MEDIAN_CREDIT)] <- 0
bonds2$MEDIAN_CREDIT_I <- as.factor(bonds2$MEDIAN_CREDIT_I)
bonds2$BadTrades <- bonds2$TTC035/(bonds2$TTC035+bonds2$TTC036+bonds2$TTC037)
bonds2$BadTrades <- ifelse(is.na(bonds2$BadTrades),0,bonds2$BadTrades)
bonds2$GoodTrades = bonds2$TTC036/(bonds2$TTC035+bonds2$TTC036+bonds2$TTC037)
bonds2$GoodTrades= ifelse(is.na(bonds2$GoodTrades),0,bonds2$GoodTrades)
bonds2$COMBINED_DBT_I <- ifelse(bonds2$COMBINED_DBT > 0, 1, 0)
bonds2$COMBINED_DBT_I[is.na(bonds2$COMBINED_DBT)] <- 0
bonds2$COMBINED_DBT_I <- as.factor(bonds2$COMBINED_DBT_I)
bonds2$COLLECTION_COUNT_I <- as.factor(ifelse(bonds2$COLLECTION_COUNT > 0, 1, 0))
bonds2$ATC020_I <- as.factor(ifelse(bonds2$ATC020 > 0, 1, 0))
bonds2$RTB026_I <- as.factor(ifelse(bonds2$RTB026 > 0, 1, 0))
bonds2$TTC038_L= log1p(bonds2$TTC038)
bonds2$TTB003_L= log1p(bonds2$TTB003)
bonds2$TTB005_L= log1p(bonds2$TTB005)
bonds2$TTB006_L= log1p(bonds2$TTB006)
bonds2$TTB007_L= log1p(bonds2$TTB007)
bonds2$TTP084_L= log1p(bonds2$TTP084)
bonds2$ACC008_L= log1p(bonds2$ACC008)
bonds2$TOTAL_ACCOUNT_BALANCE_L= log1p(bonds2$TOTAL_ACCOUNT_BALANCE)
bonds2$COMBINED_ACCOUNT_BALANCE_L= log1p(bonds2$COMBINED_ACCOUNT_BALANCE)
bonds2$EARNED_PREMIUM_L= log1p(bonds2$EARNED_PREMIUM)
bonds2$FSR_SCORE_CLASS = as.factor(bonds2$FSR_SCORE_CLASS)
bonds2$MEDIAN_CREDIT_L = log1p(bonds2$MEDIAN_CREDIT)
bonds2$COMBINED_DBT_L = log1p(bonds2$COMBINED_DBT)
# Replacing nulls in SIC3 with 999 and nulls in FSR_SCORE_CLASS with 0
bonds2$SIC3 = ifelse(is.na(bonds2$SIC3),'999', bonds2$SIC3)
bonds2$FSR_SCORE_CLASS = ifelse(is.na(bonds2$FSR_SCORE_CLASS),'0', bonds2$FSR_SCORE_CLASS)
# Convering them to factors
bonds2$SIC3 = as.factor(bonds2$SIC3)
bonds2$FSR_SCORE_CLASS = as.factor(bonds2$FSR_SCORE_CLASS)
bonds3 <- bonds2
#bonds2 = bonds3
table(bonds2$LOSS_RATIO_I)
## Create a sample such that it has approximately equal good and bad observations.
set.seed(7)
s <- sample(sum(bonds$LOSS_RATIO==0), sum(bonds$LOSS_RATIO>0))
sample.lr <- rbind(subset(bonds2, LOSS_RATIO==0)[s,], subset(bonds2, LOSS_RATIO>0))
names(bonds2)
sample.lr <- sample.lr[,c(1,2,5,6,41,42,43,46:79)]
#bonds2 <- bonds2[,c(1,2,5,6,41,42,43,46:77)]
# Creating Dev and Val samples
sample_dev = sample(nrow(sample.lr), nrow(sample.lr)*0.8)
bonds_I_dev = sample.lr[sample_dev,]
bonds_I_val = sample.lr[-sample_dev,]
names(sample.lr)
# Logistic Regression
# formula <- LOSS_RATIO_I ~ POLICY_SYMBOL+ YEARS_IN_FILE + INTELLISCORE_PLUS_V2_SCORE +
#   NUMBER_OF_EMPLOYEES + POLICY_MODULE_I + TTC038_L + NUM_OF_DEROGATORY_LEGAL_ITEMS_I +LGC003_I +
#   IQC001_I + COMBINED_DBT_I + GoodTrades + COLLECTION_COUNT_I + TTB005_L + TTB007_L + EARNED_PREMIUM_L
formula <- LOSS_RATIO_I ~ YEARS_IN_FILE + INTELLISCORE_PLUS_V2_SCORE +
POLICY_MODULE_I + TTC038_L + NUM_OF_DEROGATORY_LEGAL_ITEMS_I +LGC003_I +
IQC001_I + COMBINED_DBT_I + GoodTrades + COLLECTION_COUNT_I + TTB005_L + EARNED_PREMIUM_L
lr.model = glm(formula = formula, data= bonds_I_dev, family= binomial(link="logit"))
summary(lr.model)
formula <- LOSS_RATIO_I ~ YEARS_IN_FILE + INTELLISCORE_PLUS_V2_SCORE +
COMBINED_DBT_I + COLLECTION_COUNT_I + EARNED_PREMIUM_L
lr.model = glm(formula = formula, data= bonds_I_dev, family= binomial(link="logit"))
summary(lr.model)
auc(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response"))
roc(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response"))
auc(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response"))
roc(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response"))
table(bonds_I_dev$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_dev, type="response") > 0.5)
table(bonds_I_val$LOSS_RATIO_I, predict(lr.model, newdata=bonds_I_val, type="response") > 0.5)
mtcars
summary(mtcars)
head(mtcars)
?mtcars
library(ggplot2)
summary(mtcars$mpg)
table(mtcars$am)
ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=1, colour="black", fill="hotpink") +
facet_grid(am ~ .)
mpgplot <- ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=1, colour="black", fill="hotpink") +
facet_grid(. ~ am)
mpgplot <- ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=1, colour="black", fill="hotpink") +
facet_grid(. ~ am)
ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=1, colour="black", fill="hotpink") +
facet_grid(. ~ am)
mpgplot <- ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=1, colour="black", fill="hotpink") +
facet_grid(am ~ .)
ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type)
ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
data <- transform(mtcars,
am = factor(am, levels = 0:1, c("Automatic", "Manual"))
)
data
?transform
mtcars <- transform(mtcars,
ManTrans = am,
am = factor(am, levels = 0:1, c("Automatic", "Manual")))
mtcars
ggplot(data = mtcars, group = relevel(am) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
ggplot(data = mtcars, group = am +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
ggplot(data = mtcars, group = am)
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
ggplot(data = mtcars, group = am)
aes(mpg
)
ggplot(data = mtcars, group = am)
aes(mpg)
ggplot(data = mtcars, group = am) +
aes(mpg)
ggplot(data = mtcars, group = am) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
lm(mgp ~ ManTrans, data = mtcars)
lm(mpg ~ ManTrans, data = mtcars)
model <- lm(mpg ~ ManTrans, data = mtcars)
model
summary(model)
cor(mtcars$am, mtcars$mpg)
str(mtcars)
data(mtcars)
mtcars
str(mtcars)
cor(mtcars$am, mtcars$mpg)
correlations <- vapply(
mtcars[, -(1)],
function(x)
{
cor(ex_num[, 1], x, use = "complete")
},
numeric(1)
)
correlations <- vapply(
mtcars[, -(1)],
function(x)
{
cor(mtcars[, 1], x, use = "complete")
},
numeric(1)
)
correlations
model <- lm(mpg ~ am, data = mtcars)
summary(model)
mtcars2 <- transform(mtcars,
ManTrans = am,
am = factor(am, levels = 0:1, c("Automatic", "Manual")))
model <- lm(mpg ~ ManTrans, data = mtcars2)
model <- lm(mpg ~ ManTrans, data = mtcars2)
summary(model)
model <- lm(mpg ~ am, data = mtcars2)
summary(model)
str(mtcars2)
mtcars$Transmission = factor(am, levels = 0:1, c("Automatic", "Manual")))
mtcars$Transmission = factor(am, levels = 0:1, c("Automatic", "Manual"))
mtcars$Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
mtcars
str(mtcars)
lm(mpg ~ am, data = mtcars)
model <- lm(mpg ~ am, data = mtcars)
summary(model)
sumCoef <- summary(model)$coefficients
sumCoef
sumCoef[2,1] + c(-1, 1) * qt(.975, df = model$df) * sumCoef[2,2]
coeffs
confint(model)
resid(model)
plot(resid(model))
plot(mtcars$am, resid(model))
ggplot(mtcars$am, resid(model))
model2 <- lm(mpg ~ ., data = mtcars)
summary(model2)
confin(model2)
confint(model2)
rm(mtcars$Transmission)
Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
rm(mtcars)
mtcars
Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
model2 <- lm(mpg ~ ., data = mtcars)
summary(model2)
model2 <- lm(mpg ~ am + wt, data = mtcars)
summary(model2)
cor(mtcars$am, mtcars$wt)
ggplot(data = mtcars, group = Transmission) +
aes(wt) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
mtcars$Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
rm(Transmission)
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(am ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(Transmission ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
rm(mtcars)
Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
ggplot(data = mtcars, group = Transmission) +
aes(mpg) +
geom_histogram(binwidth=2, colour="black", fill="hotpink") +
facet_grid(Transmission ~ .) +
ggtitle("Distribution of mpg summarized by transmission type")
model3 <- lm(mpg ~ ., data = mtcars)
summary(model2)
summary(model3)
plot(mtcars$am, resid(model))
plot(mtcars$am, resid(model2))
plot(mtcars$am, resid(model3))
confint(model3)
confint(model2)
?pandoc.table
??pandoc.table
data("mtcars")
mtcars
mtcars$Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
mtcars
data("mtcars")
data
mtcars
str(mtcars)
coef(model)
summary(model)$coefficients
summary(model)
model
pandoc.table(head(mtcars),split.tables=Inf, style='simple', caption = "First 6 observations from mtcars", justify = "left")
library(pander)
pandoc.table(head(mtcars),split.tables=Inf, style='simple', caption = "First 6 observations from mtcars", justify = "left")
model
model$call
confint(model)
confint(model)[2,1]
confint(model)[2,2]
summary(model)$coefficients
confint(model)
modelall <- lm(mpg ~ ., data = mtcars)
modelallcoefs <- cbind(summary(modelall)$coefficients, confint(modelall))
pandoc.table(modelallcoefs, style='simple', caption = "Model <- lm(mpg ~ ., data = mtcars)")
summary(mtcars$mpg)
table(mtcars$Transmission)
mtcars$Transmission = factor(mtcars$am, levels = 0:1, c("Automatic", "Manual"))
table(mtcars$Transmission)
library(xtable)
modelwt <- lm(mpg ~ am + wt, data = mtcars)
modelwtcoefs <- cbind(summary(modelwt)$coefficients, confint(modelwt))
pandoc.table(modelwtcoefs, style='simple', caption = "Model <- lm(mpg ~ am + wt, data = mtcars)", justify = "left")
residuals(modelwt)
plot(wt, residuals(modelwt))
plot(mtcars$wt, residuals(modelwt))
ggplot(aes(x = mtcars$am, y = residuals(model))) +
geom_point()
ggplot(data = mtcars , aes(x = mtcars$am, y = residuals(model))) +
geom_point()
ggplot(data = mtcars , aes(x = mtcars$wt, y = residuals(modelwt))) +
geom_point()
residuals(modelwt)[1]
ggplot(data = mtcars , aes(x = factor(mtcars$am), y = residuals(model))) +
geom_point()
ggplot(data = mtcars , aes(x = factor(mtcars$am), y = residuals(model))) +
geom_point() +
xlab("Transmission Type") +
ylab("Residuals") +
scale_x_discrete(breaks = c("Automatic", "Manual"))
?scale_x_discrete
ggplot(data = mtcars , aes(x = factor(mtcars$am), y = residuals(model))) +
geom_point() +
xlab("Transmission Type") +
ylab("Residuals") +
scale_x_discrete(labels = c("Automatic", "Manual"))
ggplot(data = mtcars , aes(x = wt, y = residuals(model))) +
geom_point() +
xlab("Transmission Type") +
ylab("Residuals") +
scale_x_discrete(labels = c("Automatic", "Manual"))
ggplot(data = mtcars , aes(x = mpg, y = residuals(model))) +
geom_point() +
xlab("Transmission Type") +
ylab("Residuals") +
scale_x_discrete(labels = c("Automatic", "Manual"))
ggplot(data = mtcars , aes(x = mtcars$mpg, y = residuals(modelwt))) +
geom_point() +
xlab("Weight") +
ylab("Residuals")
library(ETLUtils)
login <- list()
login$dsn <- "analytd.dev.gai.com"
login$uid <- "external_data"
login$pwd <- "OUTSIDE_INFO"
x <- read.odbc.ffdf(
query = "select BUSINESS_IDENTIFICATION_NUMBER, PMTK_BANKRUPTCY, INTELLISCORE_PLUS_V2,
BKC008,JDB004,JDC011,UCC001,TOTAL_COMB_TRADE_LINES_COUNT,BKC006,LAST_EXPERIAN_INQUIRY_DATE,CLB002,RTD059,TTC051,TTB006,ACC008,FINANCIAL_STABILTY_RISK_SCORE,
QUARTER_1_AVERAGE_DBT,QUARTER_2_AVERAGE_DBT,QUARTER_3_AVERAGE_DBT,QUARTER_4_AVERAGE_DBT,QUARTER_5_AVERAGE_DBT
from EXTERNAL_DATA.EXPERIAN_FULL_APR16 where PMTK_BANKRUPTCY = 'Y'",
odbcConnect.args = list(dsn = login$dsn, uid = login$uid, pwd = login$pwd))
library(RODBC)
x <- read.odbc.ffdf(
query = "select BUSINESS_IDENTIFICATION_NUMBER, PMTK_BANKRUPTCY, INTELLISCORE_PLUS_V2,
BKC008,JDB004,JDC011,UCC001,TOTAL_COMB_TRADE_LINES_COUNT,BKC006,LAST_EXPERIAN_INQUIRY_DATE,CLB002,RTD059,TTC051,TTB006,ACC008,FINANCIAL_STABILTY_RISK_SCORE,
QUARTER_1_AVERAGE_DBT,QUARTER_2_AVERAGE_DBT,QUARTER_3_AVERAGE_DBT,QUARTER_4_AVERAGE_DBT,QUARTER_5_AVERAGE_DBT
from EXTERNAL_DATA.EXPERIAN_FULL_APR16 where PMTK_BANKRUPTCY = 'Y'",
odbcConnect.args = list(dsn = login$dsn, uid = login$uid, pwd = login$pwd))
x
login <- list()
login$dsn <- "Predictive Analytics"
login$uid <- "abayes"
login$pwd <- "Aribav55"
x <- read.odbc.ffdf(
query = "select TOP 1000 BUSINESS_IDENTIFICATION_NUMBER, PMTK_BANKRUPTCY, INTELLISCORE_PLUS_V2,
BKC008,JDB004,JDC011,UCC001,TOTAL_COMB_TRADE_LINES_COUNT,BKC006,LAST_EXPERIAN_INQUIRY_DATE,CTB001,CTB004,CTB005,CLB002,RTD059,TTC051,TTB006,ACC008,FINANCIAL_STABILTY_RISK_SCORE,
QUARTER_1_AVERAGE_DBT,QUARTER_2_AVERAGE_DBT,QUARTER_3_AVERAGE_DBT,QUARTER_4_AVERAGE_DBT,QUARTER_5_AVERAGE_DBT
from Jul2015",
odbcConnect.args = list(dsn = login$dsn, uid = login$uid, pwd = login$pwd))
x <- read.odbc.ffdf(
query = "select BUSINESS_IDENTIFICATION_NUMBER, PMTK_BANKRUPTCY, INTELLISCORE_PLUS_V2,
BKC008,JDB004,JDC011,UCC001,TOTAL_COMB_TRADE_LINES_COUNT,BKC006,LAST_EXPERIAN_INQUIRY_DATE,CTB001,CTB004,CTB005,CLB002,RTD059,TTC051,TTB006,ACC008,FINANCIAL_STABILTY_RISK_SCORE,
QUARTER_1_AVERAGE_DBT,QUARTER_2_AVERAGE_DBT,QUARTER_3_AVERAGE_DBT,QUARTER_4_AVERAGE_DBT,QUARTER_5_AVERAGE_DBT
from Jul2015 where PMTK_BANKRUPTCY = 'Y'",
odbcConnect.args = list(dsn = login$dsn, uid = login$uid, pwd = login$pwd))
read.odbc.ffdf
x <- read.odbc.ffdf(
query = "select BUSINESS_IDENTIFICATION_NUMBER, PMTK_BANKRUPTCY, INTELLISCORE_PLUS_V2,
BKC008,JDB004,JDC011,UCC001,TOTAL_COMB_TRADE_LINES_COUNT,BKC006,LAST_EXPERIAN_INQUIRY_DATE,CTB001,CTB004,CTB005,CLB002,RTD059,TTC051,TTB006,ACC008,FINANCIAL_STABILTY_RISK_SCORE,
QUARTER_1_AVERAGE_DBT,QUARTER_2_AVERAGE_DBT,QUARTER_3_AVERAGE_DBT,QUARTER_4_AVERAGE_DBT,QUARTER_5_AVERAGE_DBT
from Jul2015 where PMTK_BANKRUPTCY = 'Y'",
odbcConnect.args = list(dsn = login$dsn, uid = login$uid, pwd = login$pwd),
VERBOSE=TRUE)
warnings()
devtools::install_github("rstudio/rmarkdown")
install.packages("stringi")
install.packages("installr"); require(installr)} #load / install+load installr
install.packages("installr")
updateR()
library(installr)
?installr
updateR()
gc()
tables[-1:2]
tables <- c("Jan2015", "Feb2015", "Mar2015", "Apr2015", "May2015", "Jun2015", "Jul2015", "Aug2015", "Sep2015", "Oct2015", "Nov2015", "Dec2015", "Jan2016")
tables[-1:2]
tables[-1]
tables[-(1:2)]
collapse(tables)
paste(tables, collapse = '')
paste(tables, collapse = ' ')
paste(tables, collapse = " ")
paste(tables, collapse = " '")
paste(tables, collapse = "' '")
sqltext <- paste("select PMTK_BANKRUPTCY PMTK_BANKRUPTCY_new, INTELLISCORE_PLUS_V2 INTELLISCORE_PLUS_V2_new from c where BUSINESS_IDENTIFICATION_NUMBER in '", paste(tables, collapse = "' '"), "'")
sqltext
sqltext <- paste("select PMTK_BANKRUPTCY PMTK_BANKRUPTCY_new, INTELLISCORE_PLUS_V2 INTELLISCORE_PLUS_V2_new from c where BUSINESS_IDENTIFICATION_NUMBER in '", paste(tables, collapse = "' '"), "'", collapse = "")
getS3method("mean", "default")
mean
mean.default()
mean.default
plot
getAllMethods(plot)
getMethods(plot)
findMethods(plot)
MethodsList(plot)
setwd("S:/GAIC/Finance/Predictive Analytics/Data Practice/Experian/Anna R Experian Sample")
load("ex_tall_next.Rda")
load("logistic_bankruptcy_model.Rda")
showMethods(print)
showMethods(show)
showMethods(plot)
showMethods(show)
getMethod(show)
getMethod(show, default)
getMethod("show", "default")
getMethod("show")
getMethod("show", "ANY")
mean
predict
lm
colSums
show
dgamma
class(mean
)
class(predict
)
class(lm)
class(colSums)
class(show)
class(dgamma)
shiny::runApp('//cvgfnp004/cincinnati/Home/MyDocs/DataScienceCert/09-Developing Data Products/Course Project')
